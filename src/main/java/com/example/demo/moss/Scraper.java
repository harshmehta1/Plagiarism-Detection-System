package com.example.demo.moss;


import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;


import java.io.IOException;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;

/**
 * This class is a plagiarism for results generated by MOSS. Gives a detailed PlagiarismStorer list as output.
 */
public class Scraper {


    /**
     * constant variables
     */
    private static final String USER_AGENT =
            "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";
    private static final int TIME_OUT_TIME = 30000;
    private static final Logger LOGGER = Logger.getLogger(Scraper.class.getName());

    /**
     * declaration of variables
     */
    private List<String> fileNames = new LinkedList<>();
    private List<PlagiarismStorer> psList = new LinkedList<>();
    private int rowCounter = 0;


    /**
     * This class takes in a url and generates a jsoup document which is passed to performCrawling method
     * @param link the link to crawl
     * @return the list of PlagiarismStorer that includes data to generate a plagiarism report
     */

    public List<PlagiarismStorer> startScraping(String link){

        if (link.startsWith("http://moss.stanford.edu/results/")) {
            //Establishes connection with the given URL
            Connection conn = Jsoup.connect(link).timeout(TIME_OUT_TIME).userAgent(USER_AGENT).followRedirects(false);

            Document document;
            try {
                //Fetches the HTML Document from the given URL
                document = conn.get();
            } catch (IOException e) {
                return Collections.emptyList();
            }
            if (conn.response().statusCode() >= 300 && conn.response().statusCode() < 400) {
                //Redirection code for HTTP lies between 300 and 400.

                LOGGER.warning("PAGE IS REDIRECTING. CANCELING CRAWLING FOR THIS PAGE");
                return Collections.emptyList();
            } else if (conn.response().statusCode() == 200) {
                //OK code for HTTP is 200
                LOGGER.info("Scraping now...");
            }

            return performCrawling(document);
        } else {
            LOGGER.warning("PAGE IS NOT A MOSS RESULTS PAGE");
            return Collections.emptyList();
        }
    }

    /**
     * This class takes in a document to crawl and scrapes the data required to generate a plagiarism report
     * @param document the document over which scraping is to be done
     * @return a list of PlagiarismStorer that includes data to generate a plagiarism report.
     */
    private List<PlagiarismStorer> performCrawling(Document document){

        Elements resultTableRows;

         //unfocusedCrawling Query
         //Selects all the a<href> tags appearing withing <p> tags on the page
         resultTableRows = document.select("body > table > tbody > tr");

        for (Element td : resultTableRows){
            PlagiarismStorer ps = new PlagiarismStorer();
            try {

                Element url = td.selectFirst("a");
                String finalUrl = url.absUrl("href");
                Elements cols = td.select("td");
                ps.setLink(finalUrl);

                for (Element col : cols){
                   processColumn(col, ps);
                }

                psList.add(ps);

            } catch (Exception e){
                if (rowCounter == 0){
                    Elements fileNm = td.select("th");
                    for (Element fn : fileNm){
                        fileNames.add(fn.text());
                    }
                }
            }
            rowCounter++;
        }
        if (!fileNames.isEmpty()) {
            fileNames.remove(fileNames.size() - 1);
        }
        return psList;
    }

    /**
     * Processes individual columns of the MOSS comparison table
     * @param col the column to be processed
     * @param ps the PlagiarismStorer object in which the data has to be stored
     */
    private void processColumn(Element col, PlagiarismStorer ps){
        try {
            String line = col.text();
            String filename = line.substring(0, line.length() - 6);
            String pc = line.substring(line.length() - 4, line.length() - 1);
            if (ps.getFile1() == null) {
                ps.setFile1(filename);
                ps.setFile1Percent(pc);
            } else {
                ps.setFile2(filename);
                ps.setFile2Percent(pc);
            }
        } catch (Exception e){
            int lineCopied = Integer.parseInt(col.text());
            ps.setLinesCopied(lineCopied);
        }
    }
	
}
